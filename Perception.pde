int sign(float n)
{
  if(n>=0)
     return 1;
  else
     return -1;
}
/**Perceptron class - This is a simple perceptron model that generates random weights between -1 and 1 
for the synapses and then multiplies the weight values with the inputs and passes the result through the 
actiavtion function "sign" in order to check if the result is greater than or less than 0.*/
class Perceptron
{
  float[] weights;//Array of weights. Three elements only to multiply with the x and y values and the bias=1.
  float lr=1;//Learning rate. Determines speed of training.
  Perceptron(int n)
  {
    weights=new float[n];
    for(int i=0;i<weights.length;i++)
    {
        weights[i]=random(-1,1);
    }
  }
    
  int guess(float[] inputs)//Input array. This array also has a size of 2, for the x and y values.
  {
    float sum=0;//Variable to store result.
    for(int i=0;i<weights.length;i++)
    {
       sum += weights[i]*inputs[i];
    }
    int output = sign(sum);//Final output. Contains either a -1 or a +1.
    return output;
  }
  
  void train(float[]inputs, int target)
  {
    int guess=guess(inputs);//Output value generated by machine.
    int error=target-guess;//Difference between machine generated value and the correct answer.
    for(int i=0;i<weights.length;i++){
      weights[i]+=error*inputs[i]*lr;//Formula for adjusting weights to steer the model towards the correct answer.
    }
  }
  
  float guessY(float x)
  {
    return -(weights[2]/weights[1])-(weights[0]/weights[1])*x;
  }
}
